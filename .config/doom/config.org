#+TITLE: Kyonax's Doom Emacs Config
#+AUTHOR: Cristian D. Moreno - Kyonax
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+DESCRIPTION: Kyonax's personal Doom Emacs Config.
#+STARTUP: showeverything
#+VERSION: v0.2

* TABLE OF CONTENTs :toc:
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-within-dired-with-peep-dired-mode-enabled][Keybindings Within Dired With Peep-Dired-Mode Enabled]]
  - [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
- [[#doom-default-configuration][DOOM Default Configuration]]
  - [[#username--e-mail-set-up][Username & e-mail (set-up)]]
  - [[#file-coding-system][File Coding System]]
  - [[#org-config-set-up][ORG Config (set-up)]]
  - [[#bookmarks][Bookmarks]]
- [[#doom-customization][DOOM Customization]]
  - [[#doom-theme][DOOM Theme]]
  - [[#style-line-numbers][Style Line Numbers]]
  - [[#fonts-distribution][Fonts distribution]]
- [[#org-roam-set-up][ORG ROAM (set-up)]]
  - [[#main-config][Main Config]]
  - [[#org-roam-keymaps-config-and-templates][Org-roam Keymaps, Config, and Templates]]
- [[#plugins--tools-set-up][Plugins & Tools (set-up)]]
  - [[#melpa][MELPA]]
  - [[#powerline-config][Powerline Config]]
  - [[#beacon-plugin][Beacon Plugin]]
  - [[#lsp-plugin--add-ons][lsp Plugin & add-ons]]
  - [[#clippy-plugin][Clippy Plugin]]
  - [[#modeline][Modeline]]
  - [[#treemacs][TREEMACS]]
  - [[#line-settings][Line Settings]]
  - [[#ivy][Ivy]]
  - [[#ivy-posframe][IVY-POSFRAME]]
  - [[#ivy-keybindings][IVY KEYBINDINGS]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#latex-config][LateX Config]]
  - [[#pdf-view-configuration][PDF View Configuration]]
- [[#start-page][START PAGE]]
  - [[#custom-faces-dashboard][CUSTOM FACES DASHBOARD]]
- [[#gptel][GPTEl]]
  - [[#directives][DIRECTIVEs]]
- [[#tramp-windows][TRAMP WINDOWS]]
- [[#open-directory][OPEN DIRECTORY]]
  - [[#work][WORK]]
- [[#server-socket---server-file][SERVER SOCKET - SERVER FILE]]
- [[#tree-sitter][TREE-SITTER]]
  - [[#installing-packages][INSTALLING PACKAGEs]]
- [[#web-mode][WEB-MODE]]
- [[#shell-for-compilation][SHELL FOR COMPILATION]]

* DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | /Move down to next line/                      | j          |
| dired-previous-line    | /Move up to previous line/                    | k          |
| dired-mark             | /Mark file at point/                          | m          |
| dired-unmark           | /Unmark file at point/                        | u          |
| dired-do-copy          | /Copy current file or marked files/           | C          |
| dired-do-rename        | /Rename current file or marked files/         | R          |
| dired-hide-details     | /Toggle detailed listings on/off/             | (          |
| dired-git-info-mode    | /Toggle git information on/off/               | )          |
| dired-create-directory | /Create new empty directory/                  | +          |
| dired-diff             | /Compare file at point with another/          | =          |
| dired-subtree-toggle   | /Toggle viewing subtree at point/             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | /Mark files using regex/     | % m        |
| dired-do-copy-regexp    | /Copy files using regex/     | % C        |
| dired-do-rename-regexp  | /Rename files using regex/   | % R        |
| dired-mark-files-regexp | /Mark all files using regex/ | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | /Change the group of marked files/ | g G        |
| dired-do-chmod  | /Change the mode of marked files/  | M          |
| dired-do-chown  | /Change the owner of marked files/ | O          |
| dired-do-rename | /Rename file or all marked files/  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
              (:map dired-mode-map
               :desc "Peep-dired image previews" "d p" #'peep-dired
               :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

=NOTE=: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:
#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example




* DOOM Default Configuration
** Username & e-mail (set-up)
Some functionality uses this to identify you, e.g. GPG configuration, email, clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Cristian D. Moreno"
      user-mail-address "cristian.moreno@maritz.com")

#+END_SRC

** File Coding System

#+BEGIN_SRC emacs-lisp :tangle yes
(set-buffer-file-coding-system 'unix)
#+END_SRC

** ORG Config (set-up)
*** ORG Mode
ORG Mode main configuration - inspired by DT

#+BEGIN_SRC emacs-lisp :tangle yes
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/org"
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("" "" "" "󰺕" "󰻂" "󰪥" "󰻃")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-hide-emphasis-markers t
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is ready to be tackled
           "CONTENT(n)"        ; Content to accomplish
           "STREAM(s)"         ; Stream planned
           "WEB(e)"            ; Website Tasks
           "CODE(m)"           ; Coding Tasks
           "STORY(y)"          ; Storytelling TODO
           "TEST(c)"           ; Blog writing assignments
           "DEVELOP(d)"        ; Things to develop
           "DAILY(a)"          ; A Daily Task
           "MONDAY(1)"         ; The Tasks of the Monday
           "ODDT(3)"           ; The Wednesday and Friday Tasks
           "WEEKLY(k)"         ; A Weekly Task
           "DATE(4)"         ; A Weekly Task
           "EVENT(5)"         ; A Weekly Task
           "BLOG(b)"           ; Blog writing assignments
           "GYM(g)"            ; Things to accomplish at the gym
           "PROYECT(p)"           ; A project that contains other tasks
           "REVIEW(r)"         ; A project that contains other tasks
           "VIDEO(v)"          ; Video assignments
           "WAIT(w)"           ; Something is holding up this task
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has been completed
           "CANCELLED(c)" )))) ; Task has been cancelled                        )
#+END_SRC

*** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

#+begin_src emacs-lisp :tangle yes
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun dt/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'dt/insert-auto-tangle-tag)
#+end_src

*** Org-agenda
#+BEGIN_SRC emacs-lisp :tangle yes
(after! org
  (setq org-agenda-files '("~/.brain.d/roam-nodes/20240912084617-agenda.org")))

(setq
   ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
   ;; org-fancy-priorities-list '("🐲" "🐉" "🀄")
   ;; org-fancy-priorities-list '("🟥" "🟧" "🟨")
   org-agenda-block-separator 175)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "maritz"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks for Maritz:")))
          (tags "softtek"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks for Softtek:")))
          (tags "shoptron"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks for Shoptron:")))
          (tags "homea"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "[#A] Home Daily Tasks:")))
          (tags "homeb"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "[#B] Home Wed-Fri Day Tasks:")))
          (tags "homec"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "[#C] Home Weekly Tasks:")))
          (tags "health"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "Family Health:")))
          (tags "work"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "Work Tasks:")))
          (tags "kyo"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "Kyonax's Projects:")))
          (tags "event"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'wait))
                 (org-agenda-overriding-header "Important Events:")))
          (agenda "")
          (alltodo "")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("" "󱡞" "󰝨")
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight regular)
     (?B :foreground "#98be65" :weight regular)
     (?C :foreground "#c678dd" :weight regular))))
#+END_SRC

*** Org ob-languages
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (typescript . t)
   (javascript . t)
   (emacs-lisp . t)
   (js . t)
   (json . t)
   (php . t)
   ))

(setq org-babel-command:typescript "npx -p typescript -- tsc")
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Bookmarks
*** Bookmarks
Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| list-bookmarks  | /List bookmarks/                         | SPC b L    |
| bookmark-set    | /Set bookmark/                           | SPC b m    |
| bookmark-delete | /Delete bookmark/                        | SPC b M    |
| bookmark-save   | /Save current bookmark to bookmark file/ | SPC b w    |

#+BEGIN_SRC emacs-lisp :tangle yes
(setq bookmark-default-file "~/.brain.d/bookmarks/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-set
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

* DOOM Customization
** DOOM Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

(setq doom-theme 'doom-monokai-pro)
(setq doom-theme 'doom-challenger-deep)
(setq doom-theme 'doom-dracula)
(setq doom-theme 'doom-feather-dark)
(setq doom-theme 'doom-horizon)
(setq doom-theme 'doom-material)
(setq doom-theme 'doom-material-dark)
(setq doom-theme 'doom-molokai)
(setq doom-theme 'doom-xcode)

#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-theme 'gruber-darker)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+END_SRC

** Style Line Numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-mode t)
(setq line-number-mode t)
#+END_SRC

** Fonts distribution
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standart monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance, like 'for' and 'if' in C.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-font (font-spec :family "SpaceMono Nerd Font Mono" :size 11)
      doom-variable-pitch-font (font-spec :family "SpaceMono Nerd Font Mono" :size 11)
      doom-big-font (font-spec :family "SpaceMono Nerd Font Mono" :size 18))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

#+RESULTS:
| doom--customize-themes-h-462 | doom--customize-themes-h-465 | doom--customize-themes-h-735 |

* ORG ROAM (set-up)
** Main Config
Init Configuration and initialization of Org-roam

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! websocket
    :after org-roam)
(use-package! org-roam-ui
    :after org
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

** Org-roam Keymaps, Config, and Templates
More configs for ORG-roam

#+BEGIN_SRC emacs-lisp :tangle yes
(after! org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (setq org-roam-directory "~/.brain.d/roam-nodes")
  (setq org-roam-dailies-directory "~/.brain.d/agenda")
  (setq org-roam-completion-everywhere t)
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
            :if-new (file+head "%<%Y-%m-%d-$S>-${slug}.org"
                               "#+title: ${title}\n") :unnarrowed t)
          ("s" "Not Time Stamp File" plain "%?"
            :if-new (file+head "${slug}.org"
                               "#+title: ${title}\n") :unnarrowed t)
          ("f" "New Feature Azure DevOps" plain
           (file "~/.brain.d/roam-nodes/templates/NEWNodeTemplate.org")
           :if-new (file+head "%<%Y-%m-%d-%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+DESCRIPTION: %^{Description}\n#+FILETAGS: %^{File Tags}\n#+AUTHOR: %^{Author}\n")
           :unnarrowed t)
          ("i" "New Sentinel Inspection" plain
           (file "~/.brain.d/roam-nodes/templates/NEWNodeSentinelInspection.org")
           :if-new (file+head "%<%Y-%m-%d-%S>-${slug}.org"
                              "#+TITLE: Kyonax's Daily Sentinel Inspection ~ %<%d/%m/%Y> \n")
           :unnarrowed t)
          ("p" "New PBI Azure DevOps" plain
           (file "~/.brain.d/roam-nodes/templates/NEWNodeProject.org")
           :if-new (file+head "%<%Y-%m-%d-%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+DESCRIPTION: %^{Description}\n#+FILETAGS: %^{File Tags}\n#+AUTHOR: %^{Author}\n")
           :unnarrowed t))))
#+END_SRC


| COMMAND                            | DESCRIPTION                                 | KEYBINDING |
|------------------------------------+---------------------------------------------+------------|
| org-roam-dailies-capture-yesterday | /Create a daily roam node for Yesterday/      | SPC n D Y  |
| org-roam-dailies-capture-yesterday | /Create a daily roam node for Today/          | SPC n D H  |
| org-roam-dailies-capture-tomorrow  | /Create a daily roam node for Tomorrow/       | SPC n D T  |
| org-roam-dailies-capture-date      | /Create a daily roam node using Calendar/     | SPC n D C  |
| org-roam-dailies-goto-date         | /Find a daily roam node from a specific Date/ | SPC n e d  |

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix ("n D" . "Create Roam Nodes")
       :desc "Daily Nodes - Yesterday" "Y" #'org-roam-dailies-capture-yesterday
       :desc "Daily Nodes - Today" "H" #'org-roam-dailies-capture-today
       :desc "Daily Nodes - Calendar" "C" #'org-roam-dailies-capture-date
       :desc "Daily Nodes - Tomorrow" "T" #'org-roam-dailies-capture-tomorrow))
#+end_src

#+BEGIN_SRC emacs-lisp :tangle yes
(map! :leader
      (:prefix ("n e" . "Find Roam Nodes")
       :desc "Daily Nodes - Date" "d" #'org-roam-dailies-goto-date
       :desc "Daily Nodes - Yesterday" "Y" #'org-roam-dailies-goto-yesterday
       :desc "Daily Nodes - Today" "H" #'org-roam-dailies-goto-today
       :desc "Daily Nodes - Tomorrow" "T" #'org-roam-dailies-goto-tomorrow))
#+END_SRC

* Plugins & Tools (set-up)
** MELPA
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+END_SRC
** Powerline Config
Necessary for Windows usage

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'powerline)
(powerline-default-theme)
#+END_SRC

** Beacon Plugin
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+BEGIN_SRC emacs-lisp :tangle yes
(beacon-mode 1)
#+END_SRC

** lsp Plugin & add-ons
Initialization of lsp.

#+BEGIN_SRC emacs-lisp :tangle yes
(after! ccls
  (setq ccls-executable "C:/ProgramData/chocolatey/bin/ccls.exe")
  (set-lsp-priority! 'ccls 0))
#+END_SRC

** Clippy Plugin
Gives us a popup box with "Clippy, the paper clip". You can make him say various things by calling 'clippy-say' function.  But the more useful functions of clippy are the two describe functions provided: 'clippy-describe-function' and 'clippy-describe-variable'.  Hit the appropriate keybinding while the point is over a function/variable to call it.  A popup with helpful clippy will appear, telling you about the function/variable (using describe-function and describe-variable respectively).

| COMMAND                  | DESCRIPTION                           | KEYBINDING |
|--------------------------+---------------------------------------+------------|
| clippy-describe-function | /Clippy describes function under point/ | SPC c h f  |
| clippy-describe-variable | /Clippy describes variable under point/ | SPC c h v  |

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix ("c h" . "Help info from Clippy")
       :desc "Clippy describes function under point" "f" #'clippy-describe-function
       :desc "Clippy describes variable under point" "v" #'clippy-describe-variable))

#+end_src

** Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

- Config Modeline
#+BEGIN_SRC emacs-lisp :tangle yes
(set-face-attribute 'mode-line nil :font "SpaceMono Nerd Font Mono")
(setq doom-modeline-support-imenu t ;;
      doom-modeline-buffer-state-icon t ;;
      doom-modeline-icon t ;;
      doom-modeline-height 30     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+END_SRC

** TREEMACS
TREEMACS PERSONALIZATION
#+BEGIN_SRC emacs-lisp :tangle yes
(after! treemacs
  (setq evil-treemacs-state-cursor t
        treemacs-show-cursor t
        treemacs-width 40))
#+END_SRC

** Line Settings
I have toggled display-line-numbers-type so I have line numbers displayed. Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for toggle-truncate-lines.

#+BEGIN_SRC emacs-lisp :tangle yes
(map! :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)
#+END_SRC

** Ivy
Ivy is a generic completion mechanism for Emacs.

** IVY-POSFRAME
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

** IVY KEYBINDINGS
By default, Doom Emacs does not use 'SPC v', so the format I use for these bindings is 'SPC v' plus 'key'.

#+BEGIN_SRC emacs-lisp :tangle yes
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+END_SRC

** RAINBOW MODE
Rainbox mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).

#+begin_src emacs-lisp :tangle yes
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC

** LateX Config
The Latex Configuration to export high quality PDF's

#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
                [NO-DEFAULT-PACKAGES]
                [PACKAGES]
                \\newcommand{\\checkbox}{\\text{[ ]}} % Define \checkbox
                \\newcommand{\\checkedbox}{\\text{[X]}} % Define \checkedbox
                [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(after! org
  ;; Minted config for much better syntax highlightig to src blocks.
  (setq
   org-latex-listings 'minted
   ;; minted calls the pygmentize process and thus needs shell escaping
   org-latex-pdf-process
   '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   ;; NOTE I don't actually add minted to the package list, I'll just \usepackage it when needed

   ;;(setq org-latex-pdf-process
   ;;'("latexmk -f -pdf %f")) ; Doesn't work with pdflatex
   ;; Margins
   ;;(add-to-list 'org-latex-packages-alist '("a4paper,margin=1.1in" "geometry"))

   ;; Add 'colorlinks' option to hyperrref, its much prettier
   org-latex-hyperref-template
   "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c},
 pdflang={%L},
 colorlinks=true,
 linkcolor={cyan}
}"
   ;; page break after TOC
   org-latex-toc-command "\\tableofcontents\n\\pagebreak\n\n")
  ;; org-latex-minted-options '(("bgcolor" "{white!98!black}"))
  ;; org-latex-minted-options '(("bgcolor" "\\color{white!96!black}"))
  ;; In case I configured hyperref in a separate latex preamble
  ;;(setq org-latex-hyperref-template ""))
  (add-hook! 'org-roam-buffer-prepare-hook
    (setq display-line-numbers nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-highlight-latex-and-related '(native))

(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))

;; Define the custom checklist symbols in LaTeX
(defun my-org-latex-checklist-filter (text backend info)
  "Replace Org checklist symbols with custom LaTeX symbols."
  (when (org-export-derived-backend-p backend 'latex)
    (let ((text (replace-regexp-in-string "\\[ \\]" "\\\\checkbox" text))
          (text (replace-regexp-in-string "\\[X\\]" "\\\\checkedbox" text)))
      text)))

;; Add the custom filter to the export process
(add-hook 'org-export-filter-final-output-functions
          'my-org-latex-checklist-filter)
#+END_SRC

** PDF View Configuration
PDF Viewer

#+BEGIN_SRC emacs-lisp :tangle no
(use-package pdf-view
  :hook (pdf-tools-enabled . pdf-view-midnight-minor-mode)
  :hook (pdf-tools-enabled . hide-mode-line-mode)
  :config
  (setq pdf-view-midnight-colors '("#ABB2BF" . "#282C35")))
#+END_SRC
#+RESULTS:
| latex | (:inherit default :extend t) |

* START PAGE
What appears at the beginning!

#+BEGIN_SRC emacs-lisp :tangle yes
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "kyonax_on_tech - is.kyonax")))

                (defun my-weebery-is-always-greater ()
  (let* ((banner '(
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣧⡀⣿⣤⣀⣾⣅⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣤⣤⠲⠶⣦⡿⣿⣿⣿⣿⣿⣿⣿⣴⣴⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⢲⣦⣿⣟⠛⡓⣀⠐⠋⢽⠟⡿⢿⣿⣿⢛⢷⣤⣤⠄⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠠⢤⣦⣤⡦⠆⢈⢋⣡⡔⠁⢀⡠⠐⢻⡿⢃⡄⠀⣿⣧⣤⣀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠗⡪⢛⣿⣿⣷⢾⡟⠀⣊⣴⣷⣿⢧⣦⣿⣿⢿⣁⣀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⢈⡬⠟⠂⠀⠖⠀⠞⠉⡽⠃⢈⠡⢋⠏⡰⠀⡿⠈⠛⣿⡇⠸⢢⡀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠊⠄⠁⠀⠐⣀⣪⢀⣔⡤⠂⣠⢀⡴⠀⣡⡀⠁⠈⠃⡢⠡⣄⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⢤⣜⣉⡛⠻⢿⣷⣿⣿⣾⣷⡾⠿⠷⠆⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⣾⠧⣬⣍⣑⠢⣽⣿⣿⣋⡤⠴⠒⢛⣳⣧⠀⠈⠀⢤⡄⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⣤⣧⠀⡄⢿⣧⡙⠛⠻⣤⣿⣿⣿⣿⣠⣿⡿⠟⣹⡧⠐⠠⠠⣿⡧⠀⠀⠀⠀"
"⠀⠀⠀⠀⣠⣾⣿⣿⣧⡀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⡿⠁⢋⡄⠐⣿⣿⠀⠀⠀⠀"
"⠀⠀⢀⣼⣿⣿⣿⣿⣟⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⣿⡧⠀⣿⣿⡀⣧⠀⠀"
"⠀⠀⣿⣿⣿⣿⣿⠛⢿⣷⡄⢢⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢁⠀⠀⢛⣩⣴⣿⡿⢃⡌⠀⠀"
"⠀⠀⠙⣿⣿⣿⣿⣿⣶⣌⠻⢦⡁⠀⠻⣿⣿⣿⣿⠿⠋⠀⣘⣡⣶⣿⡿⠟⣛⣡⠶⢋⠄⠀⠀"
"⠀⠀⠀⠈⠻⠿⡿⡿⣿⣿⣿⣦⣙⠢⠀⠀⠈⠈⣀⣤⣶⣿⣟⢛⡩⠔⣒⣩⣥⣤⣶⣿⠂⠀⠀"
"⠀⠀⠀⠀⠀⠰⣶⣦⣦⣦⡙⢿⡿⠓⣀⣠⣴⣿⣿⣿⡿⢛⣩⣴⣾⣿⡿⠿⠛⠋⠉⠁⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠈⠙⠻⢿⣿⣦⣅⠘⠿⠋⠁⢈⠟⣫⣿⣿⠿⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠃⠐⡄⠀⠁⡺⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)
#+END_SRC

** CUSTOM FACES DASHBOARD
 Custom Colors for the Dashboard Config.

#+BEGIN_SRC emacs-lisp :tangle yes
(custom-set-faces!
  '(doom-dashboard-banner :foreground "#9FE573" :background "#000000" :weight bold)
  '(doom-dashboard-loaded :foreground "#9FE573" :background "#000000" :weight bold))
#+END_SRC

* GPTEl
Registering Backend Models and AIs, making default Backend:

#+BEGIN_SRC emacs-lisp :tangle yes
(gptel-make-openai "xAI"
  :host "api.x.ai"
  :key (shell-command-to-string (format "gopass show sub/private_key/xai"))
  :endpoint "/v1/chat/completions"
  :stream t
  :models '(grok-2-latest))

;; OPTIONAL configuration
(setq
 gptel-model   'grok-2-latest
 gptel-backend
 (gptel-make-openai "xAI"           ;Any name you want
   :host "api.x.ai"
   :key (shell-command-to-string (format "gopass show sub/private_key/xai"))              ;can be a function that returns the key
   :endpoint "/v1/chat/completions"
   :stream t
   :models '(;; xAI now only offers `grok-beta` as of the time of this writing
             grok-2-latest)))
#+END_SRC

** DIRECTIVEs
#+begin_src emacs-lisp :tangle yes
(setq! gptel-directives '(
 (default . "Test 32")
 (studying .
"I am working in Doom Emacs using Org Mode to document research in a `.org` file. My goal is to improve the quality of the file, making it more readable, accessible, and well-structured for learning and reference. Depending on my request, you will provide one of the following types of support:

1. **Rewriting the Whole File**:
   - If I ask to rewrite the entire `.org` file, provide **only the new structured `.org` file** as the output, without any explanations, documentation, or unrelated content. Follow these guidelines:
     - Use clear and consistent title structures (all titles must be in UPPER CASE; plural words like CATs should have a lowercase 's').
     - Apply Org Mode best practices for documenting research, such as logical hierarchy, tags, and metadata.
     - Do not modify the existing configuration data (e.g., `:PROPERTIES:`, `#+title:`, `#+filetags:`, etc.).
     - Organize content with sections, subsections, and bullet points.
     - Include `.org` code blocks to demonstrate improvements and practical exercises (if applicable).

2. **Support for Small Pieces of Research**:
   - If I ask for help with a small piece of research or a specific point, focus on providing clear, concise, and well-structured support. Follow these strategies:
     - Use human-readable and learning-friendly formats.
     - Explain complex terms or concepts if necessary.
     - Provide examples, references, or documentation if requested.
     - Structure the response to make it easy to integrate into the `.org` file.

3. **Improving Text Structure**:
   - If I ask for help structuring text to make it more readable, focus on organizing the content logically. Use headings, bullet points, and clear formatting to enhance readability.

4. **Providing Examples or References**:
   - If I ask for examples, provide `.org` code blocks or practical demonstrations.
   - If I ask for references or documentation, suggest reliable sources or links to further information.

5. **Translation into Other Languages**:
  - If I ask for translation support, provide an accurate and context-aware translation of the specified content into the requested language. Ensure the translation maintains the original meaning, tone, and structure while adapting to the target language's conventions.

**General Guidelines**:
- Always prioritize clarity, readability, and usability.
- Adapt your response to the specific type of support I request.
- Do not include unnecessary explanations, documentation, or unrelated content unless explicitly requested.

**Deliverables**:
 - Provide only the requested output, whether it’s a rewritten .org file, support for a small piece of research, improved text structure, examples, references, or translations. Do not include additional explanations or unrelated content unless explicitly requested.
 ")
 (documentation .
  "
You are an expert developer specialized in refining code documentation. Your sole focus is improving the clarity and readability of the documentation without altering the code or structure. Follow these guidelines strictly:
Description

    Clearly and concisely explain the purpose of the function, class, or module.
    Cross-check the description with the code to ensure accuracy. The explanation must fully align with what the code does.
    Avoid jargon or buzzwords like scalable, intuitive, or robust.
    Provide enough context for someone new to coding to understand, but donÔÇÖt oversimplify.

Usage

    If a usage example exists, ensure it reflects the most common and simplest use case for the code.
    Verify that the usage aligns with the codeÔÇÖs behavior. Refine it to be precise, accurate, and functional out of the box.
    Be precise. No room for vagueness.

Parameters/Attributes

    If parameters or attributes are documented, verify they match the code exactly. Ensure names, types, and purposes are accurate and specific.
    Describe each parameter/attribute in a short, one-line summary that eliminates ambiguity.
    Do not add parameter documentation if itÔÇÖs not already present in the code.

Important Notes:

    Do not modify the code itself.
    Do not add new sections or alter the documentation structure.
    Always verify the documentation matches the code, ensuring accuracy and relevance.
    Keep explanations terse, professional, and focused. Skip pleasantries or unnecessary details.
    Always return just the answer and only the answer. Do not enclose it in code blocks, as we are already in a code editor.
")
 ))

#+end_src

* TRAMP WINDOWS
PuTTY Installation and plink ENV/Variable for Host Connections.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq password-cache-expiry nil)
#+END_SRC

#+begin_src emacs-lisp :tangle yes
;;; package --- Inserting a new Tramp Method
;;; Commentary:
;;; Adding a new Tramp Method to execute docker containers.
;;;
;;; Code:
(require 'tramp)
(add-to-list 'tramp-methods `("plinkw"
               (tramp-login-program "plink")
               (tramp-login-args (("-ssh")
				  (,(format
				     "dockware@127.0.0.1 -pw dockware"))))
               (tramp-remote-shell "/bin/sh")))
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no
(setq password-cache-expiry nil)

(when (eq window-system 'w32)
  (setq tramp-default-method "plink")
  (when (and (not (string-match putty-directory (getenv "PATH")))
	     (file-directory-p putty-directory))
    (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
    (add-to-list 'exec-path putty-directory)))
#+END_SRC

* OPEN DIRECTORY
Custom script to open directories

#+begin_src emacs-lisp :tangle yes
(defun open-directory (dir)
  "Open the specified directory DIR in Dired mode."
  (interactive "DChoose directory: ") ; Prompt for directory
  (dired dir))
#+end_src

** WORK
#+begin_src emacs-lisp :tangle yes
(defun shoptron ()
  "Open the Shoptron main Directory"
  (interactive)
  (open-directory "/plinkw:dockware@127.0.0.1:~/html"))

(defun shtheme ()
  "Open the ShoptronTheme main Directory"
  (interactive)
  (open-directory "/plinkw:dockware@127.0.0.1:~/html/custom/plugins/ShoptronTheme"))

(defun shconfigurator ()
  "Open the ShoptronConfiurator main Directory"
  (interactive)
  (open-directory "/plinkw:dockware@127.0.0.1:~/html/custom/plugins/ShoptronConfigurator"))
#+end_src

* SERVER SOCKET - SERVER FILE
#+begin_src emacs-lisp :tangle yes
(require 'server)
(setq server-use-tcp t
      server-socket-dir "~/.config/emacs/server")
;; (unless (server-running-p)
;;     (server-start))
#+end_src

* TREE-SITTER
#+begin_src emacs-lisp :tangle yes
;;; Tree Sitter

(use-package! tree-sitter
   :hook (prog-mode . turn-on-tree-sitter-mode)
   :hook (tree-sitter-after-on . tree-sitter-hl-mode)
   :config
   (require 'tree-sitter-langs)
   ;; This makes every node a link to a section of code
   (setq tree-sitter-debug-jump-buttons t
         ;; and this highlights the entire sub tree in your code
         tree-sitter-debug-highlight-jump-region t))
#+end_src

** INSTALLING PACKAGEs
#+begin_src emacs-lisp :tangle yes
(use-package treesit
  :config
  (setq treesit-font-lock-level 4)
  (setq treesit-extra-load-path '("~/.config/emacs/tree-sitter"))
  (setq treesit-language-source-alist
        '((css "https://github.com/tree-sitter/tree-sitter-css" "v0.20.0")
          (json "https://github.com/tree-sitter/tree-sitter-json" "v0.20.2")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1")
          (html "https://github.com/tree-sitter/tree-sitter-html" "v0.20.1")
          (php "https://github.com/tree-sitter/tree-sitter-php" "master" "php/src")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1")))
  (setq major-mode-remap-alist
        '((css-mode . css-ts-mode)
          (html-mode . html-ts-mode)
          (markdown-mode . markdown-ts-mode)
          (json-mode . json-ts-mode)
          (php-mode . php-ts-mode)
          (js2-mode . js-ts-mode))))


(use-package combobulate
   :custom
   ;; You can customize Combobulate's key prefix here.
   ;; Note that you may have to restart Emacs for this to take effect!
   (combobulate-key-prefix "C-c o")
   :hook ((prog-mode . combobulate-mode))
   ;; Amend this to the directory where you keep Combobulate's source
   ;; code.
   :load-path ("~/.config/doom/custom_packages/combobulate"))

;; (require 'treesit)

;; (add-to-list 'treesit-language-source-alist
;;              '(php "~/.config/emacs/tree-sitter/tree-sitter-php"))

;; (add-to-list 'major-mode-remap-alist
;;              '(php-mode . php-ts-mode))
#+end_src

* WEB-MODE
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.html\\.twig\\'" . web-mode))
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-block-padding 2))
#+end_src

* SHELL FOR COMPILATION
#+begin_src emacs-lisp :tangle yes
(use-package compile
  :config
  (setq! shell-file-name "C:/Users/MORENOC0/scoop/apps/pwsh/7.5.0/pwsh.exe"))
#+end_src
